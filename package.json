{
  "name": "typescript-hero",
  "displayName": "TypeScript Hero",
  "description": "Additional tooling for the typescript language",
  "icon": "etc/icon.png",
  "galleryBanner": {
    "color": "#1e324c",
    "theme": "dark"
  },
  "version": "0.9.0",
  "publisher": "rbbit",
  "engines": {
    "vscode": "^1.6.0",
    "node": ">=6.0.0",
    "npm": ">=3.9.5"
  },
  "categories": [
    "Other",
    "Languages"
  ],
  "main": "./out/src/extension",
  "author": "Christoph BÃ¼hler <christoph.buehler@bluewin.ch>",
  "contributors": [
    {
      "name": "Dominique Wirz",
      "email": "dominique.wirz@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/buehler/typescript-hero.git"
  },
  "bugs": {
    "url": "https://github.com/buehler/typescript-hero/issues"
  },
  "homepage": "https://buehler.github.io/typescript-hero/",
  "scripts": {
    "vscode:prepublish": "npm run install && npm run build && npm prune --production",
    "precompile": "del ./out",
    "compile": "tsc -w --sourceMap",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "pretest": "tslint --force -c tslint.json --project tsconfig.json -e \"test/**/*.*\"",
    "test": "node ./node_modules/vscode/bin/test",
    "build": "del ./out && tsc",
    "package": "npm run build && del './*.vsix' && vsce package"
  },
  "devDependencies": {
    "@types/chai": "^3.4.34",
    "@types/inversify": "^2.0.31",
    "@types/mocha": "^2.2.32",
    "@types/node": "^6.0.45",
    "@types/reflect-metadata": "0.0.5",
    "chai": "^3.5.0",
    "del-cli": "^0.2.0",
    "filewalker": "^0.1.3",
    "tslint": "^3.15.1",
    "vscode": "^1.0.0"
  },
  "dependencies": {
    "inversify": "^2.0.0",
    "reflect-metadata": "^0.1.8",
    "typescript": "^2.0.3"
  },
  "activationEvents": [
    "onCommand:typescriptHero.showCmdGui",
    "onCommand:typescriptHero.addImport",
    "onCommand:typescriptHero.organizeImports",
    "onLanguage:typescript",
    "onLanguage:typescriptreact"
  ],
  "contributes": {
    "commands": [
      {
        "command": "typescriptHero.showCmdGui",
        "title": "Typescript: Show the command gui of typescripthero"
      },
      {
        "command": "typescriptHero.resolve.addImport",
        "title": "Typescript: Add import to current file"
      },
      {
        "command": "typescriptHero.resolve.addImportUnderCursor",
        "title": "Typescript: Adds the current symbol under the cursor as an import to current file"
      },
      {
        "command": "typescriptHero.resolve.organizeImports",
        "title": "Typescript: Organize imports (sort and remove unused)"
      },
      {
        "command": "typescriptHero.resolve.rebuildCache",
        "title": "Typescript: Rebuild the resolver cache"
      },
      {
        "command": "typescriptHero.restartDebugger.toggle",
        "title": "Typescript: Toggles the debug restarter"
      }
    ],
    "keybindings": [
      {
        "command": "typescriptHero.showCmdGui",
        "key": "ctrl+alt+g"
      },
      {
        "command": "typescriptHero.resolve.addImport",
        "key": "ctrl+alt+i",
        "when": "editorTextFocus"
      },
      {
        "command": "typescriptHero.resolve.addImportUnderCursor",
        "key": "ctrl+alt+shift+i",
        "when": "editorTextFocus"
      },
      {
        "command": "typescriptHero.resolve.organizeImports",
        "key": "ctrl+alt+o",
        "when": "editorTextFocus"
      }
    ],
    "configuration": {
      "title": "Configuration section of the typescript hero extension",
      "properties": {
        "typescriptHero.verbosity": {
          "enum": [
            "Nothing",
            "Errors",
            "Warnings",
            "All"
          ],
          "default": "Warnings",
          "description": "Defines the log output level in the output window."
        },
        "typescriptHero.resolver.insertSpaceBeforeAndAfterImportBraces": {
          "type": "boolean",
          "default": true,
          "description": "Defines if there should be a space inside the curly braces of an import statement."
        },
        "typescriptHero.resolver.pathStringDelimiter": {
          "enum": [
            "'",
            "\""
          ],
          "default": "'",
          "description": "Defines if single or double quotes should be used."
        },
        "typescriptHero.resolver.ignorePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "default": [
            "typescript",
            "tslint",
            "node_modules/typings",
            "node_modules/typings-core",
            "build",
            "out",
            "dist"
          ],
          "description": "Defines partial pathes that are ignored during indexing (e.g. 'node_modules' would exclude all modules)."
        },
        "typescriptHero.resolver.multiLineWrapThreshold": {
          "type": "number",
          "minimum": 1,
          "multipleOf": 1,
          "default": 120,
          "description": "Defines the threshold when an import should be wrapped into a multiline import."
        },
        "typescriptHero.resolver.newImportLocation": {
          "enum": [
            "TopOfFile",
            "AtCursorLocation"
          ],
          "default": "TopOfFile",
          "description": "Defines the location of new imports."
        },
        "typescriptHero.restartDebugger.watchFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "default": [
            "build",
            "out",
            "dist"
          ],
          "description": "Defines the folders that are watched for filechanges to restart the debugger."
        },
        "typescriptHero.restartDebugger.active": {
          "type": "boolean",
          "default": true,
          "description": "Defines if the restart debugger extension is active at startup."
        }
      }
    }
  }
}
