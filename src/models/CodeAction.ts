import { DeclarationInfo, ResolveIndex } from '../caches/ResolveIndex';
import { ImportManager } from '../controllers/DocumentController';
import { TextDocument } from 'vscode';

/**
 * Interface for all codeactions that are generated by the typescript code action provider.
 * 
 * @export
 * @interface CodeAction
 */
export interface CodeAction {

    /**
     * Executes the code action. Depending on the action, there are several actions performed.
     * 
     * @returns {Promise<boolean>}
     * 
     * @memberOf CodeAction
     */
    execute(): Promise<boolean>;
}

/**
 * Code action that adds a missing import the the actual document.
 * 
 * @export
 * @class AddImportCodeAction
 * @implements {CodeAction}
 */
export class AddImportCodeAction implements CodeAction {
    constructor(private document: TextDocument, private importToAdd: DeclarationInfo) { }

    public async execute(): Promise<boolean> {
        let controller = await ImportManager.create(this.document);
        return controller.addDeclarationImport(this.importToAdd).commit();
    }
}

/**
 * Code action that adds all missing imports to the actual document, based on the non-local usages.
 * 
 * @export
 * @class AddMissingImportsCodeAction
 * @implements {CodeAction}
 */
export class AddMissingImportsCodeAction implements CodeAction {
    constructor(private document: TextDocument, private resolveIndex: ResolveIndex) { }

    public async execute(): Promise<boolean> {
        let controller = await ImportManager.create(this.document);
        return controller.addMissingImports(this.resolveIndex).commit();
    }
}

/**
 * Code action that does literally nothing. Is used to "communicate" with the user. E.g. if
 * an import cannot be resolved, the lightbulb will show "cannot resolve <CLASS>".
 * 
 * @export
 * @class NoopCodeAction
 * @implements {CodeAction}
 */
export class NoopCodeAction implements CodeAction {
    public execute(): Promise<boolean> {
        return Promise.resolve(true);
    }
}
