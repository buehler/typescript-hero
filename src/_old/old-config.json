{
  "configuration": {
    "typescriptHero.codeCompletion.completionSortMode": {
      "enum": [
        "default",
        "bottom"
      ],
      "default": "default",
      "description": "Defines the sortmode of the code completion in intellisense (bottom means sorted to bottom).",
      "scope": "resource"
    },
    "typescriptHero.resolver.workspaceIgnorePatterns": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "default": [
        "**/build/**/*",
        "**/out/**/*",
        "**/dist/**/*"
      ],
      "description": "Defines partial pathes (globs) that are ignored during indexing of the **workspace** (e.g. 'node_modules/**/*' would exclude all modules).",
      "scope": "resource"
    },
    "typescriptHero.resolver.moduleIgnorePatterns": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "default": [
        "**/node_modules/**/*"
      ],
      "description": "Defines partial pathes (globs) that are ignored during indexing of the **node_modules**. This patterns are attached to the node_module/<name> of each found module.",
      "scope": "resource"
    },
    "typescriptHero.resolver.resolverMode": {
      "enum": [
        "TypeScript",
        "ES6",
        "Both"
      ],
      "default": "Both",
      "description": "Defines the mode of the symbol resolver. (Note that JavaScript mode only indexes workspace files)",
      "scope": "resource"
    },
    "typescriptHero.resolver.promptForSpecifiers": {
      "type": "boolean",
      "default": true,
      "description": "Defines if typescript hero should ask the user for default specifiers or duplicate specifier aliases.",
      "scope": "window"
    }
  },
  "commands": [
    {
      "command": "typescriptHero.resolve.addImport",
      "title": "TS Hero: Add an import to current file"
    },
    {
      "command": "typescriptHero.resolve.addImportUnderCursor",
      "title": "TS Hero: Adds the current symbol under the cursor as an import to current file"
    },
    {
      "command": "typescriptHero.resolve.addMissingImports",
      "title": "TS Hero: Adds all missing imports for the open document"
    },
    {
      "command": "typescriptHero.resolve.organizeImports",
      "title": "TS Hero: Organize imports (sort and remove unused)"
    },
    {
      "command": "typescriptHero.resolve.rebuildCache",
      "title": "TS Hero: Rebuild the resolver cache"
    },
    {
      "command": "typescriptHero.codeFix.executeCodeAction",
      "title": "TS Hero (internal): Execute a code action"
    },
    {
      "command": "typescriptHero.codeCompletion.executeIntellisenseItem",
      "title": "TS Hero (internal): Execute the command for a intellisense item"
    },
    {
      "command": "typescriptHero.documentCodeOutline.gotoNode",
      "title": "TS Hero (internal): Jump to the given nodes location"
    }
  ],
  "keybindings": [
    {
      "command": "typescriptHero.resolve.addImport",
      "key": "ctrl+shift+i",
      "when": "editorTextFocus"
    },
    {
      "command": "typescriptHero.resolve.addImportUnderCursor",
      "key": "ctrl+alt+i",
      "when": "editorTextFocus"
    },
    {
      "command": "typescriptHero.resolve.addMissingImports",
      "key": "ctrl+alt+shift+i",
      "when": "editorTextFocus"
    },
    {
      "command": "typescriptHero.resolve.organizeImports",
      "key": "ctrl+alt+o",
      "when": "editorTextFocus"
    }
  ]
}
